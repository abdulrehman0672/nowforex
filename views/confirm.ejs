<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Password</title>
    <link rel="stylesheet" href="/output.css">
    <style>
        /* Custom CSS for animations */
        @keyframes floating {
            0% {
                transform: translateY(0px) rotate(0deg);
            }

            50% {
                transform: translateY(-20px) rotate(10deg);
            }

            100% {
                transform: translateY(0px) rotate(0deg);
            }
        }

        .animate-floating {
            animation: floating 6s ease-in-out infinite;
        }

        .animate-floating-delayed {
            animation: floating 6s ease-in-out 1s infinite;
        }

        .password-toggle {
            cursor: pointer;
        }

        .logo {
            height: 60px;
            margin: 0 auto 20px;
            display: block;
        }

        .password-strength {
            height: 4px;
            background: #e5e7eb;
            border-radius: 2px;
            margin-top: 8px;
            overflow: hidden;
        }

        .strength-meter {
            height: 100%;
            width: 0%;
            transition: width 0.3s ease, background 0.3s ease;
        }

        .requirement {
            display: flex;
            align-items: center;
            margin-bottom: 4px;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .requirement.valid {
            color: #10b981;
        }

        .requirement svg {
            margin-right: 6px;
        }
    </style>
</head>

<body class="bg-gradient-to-br from-blue-700 to-blue-300 min-h-screen flex items-center justify-center p-4">
    <div class="w-full max-w-md bg-white rounded-2xl shadow-xl p-8 relative overflow-hidden">
        <!-- Animated Background -->
        <div class="absolute -top-32 -right-32 w-64 h-64 bg-purple-300 rounded-full opacity-20 animate-floating"></div>
        <div
            class="absolute -bottom-32 -left-32 w-64 h-64 bg-blue-300 rounded-full opacity-20 animate-floating-delayed">
        </div>

        <!-- Logo -->
        <img src="/logo.svg" alt="Company Logo" class="logo">

        <h1 class="text-3xl font-bold text-gray-800 mb-2 text-center">
            Create New Password
        </h1>

        <p class="text-gray-600 text-center mb-8">
            Your new password must be different from previously used passwords
        </p>

        <form class="space-y-6" id="passwordForm">
            <!-- New Password -->
            <div>
                <label class="block text-gray-700 mb-2">New Password</label>
                <div class="relative">
                    <div class="absolute top-3 left-3 text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </div>
                    <input id="newPassword" type="password" placeholder="••••••••"
                        class="w-full pl-10 pr-12 py-3 border rounded-lg focus:outline-none focus:border-blue-500"
                        oninput="checkPasswordStrength()" />
                    <button type="button" class="password-toggle absolute top-3 right-3 text-gray-400"
                        onclick="togglePassword('newPassword', 'newPasswordEye')">
                        <svg id="newPasswordEye" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                            fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd"
                                d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>

                <!-- Password Strength Meter -->
                <div class="password-strength">
                    <div id="strengthMeter" class="strength-meter"></div>
                </div>

                <!-- Password Requirements -->
                <div class="mt-3">
                    <p class="text-sm text-gray-600 mb-2">Password must contain:</p>
                    <div class="requirement" id="lengthReq">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                clip-rule="evenodd" />
                        </svg>
                        At least 8 characters
                    </div>
                    <div class="requirement" id="uppercaseReq">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                clip-rule="evenodd" />
                        </svg>
                        At least 1 uppercase letter
                    </div>
                    <div class="requirement" id="numberReq">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                clip-rule="evenodd" />
                        </svg>
                        At least 1 number
                    </div>
                    <div class="requirement" id="specialReq">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                                clip-rule="evenodd" />
                        </svg>
                        At least 1 special character
                    </div>
                </div>
            </div>

            <!-- Confirm New Password -->
            <div>
                <label class="block text-gray-700 mb-2">Confirm New Password</label>
                <div class="relative">
                    <div class="absolute top-3 left-3 text-gray-400">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </div>
                    <input id="confirmPassword" type="password" placeholder="••••••••"
                        class="w-full pl-10 pr-12 py-3 border rounded-lg focus:outline-none focus:border-blue-500"
                        oninput="checkPasswordMatch()" />
                    <button type="button" class="password-toggle absolute top-3 right-3 text-gray-400"
                        onclick="togglePassword('confirmPassword', 'confirmPasswordEye')">
                        <svg id="confirmPasswordEye" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5"
                            viewBox="0 0 20 20" fill="currentColor">
                            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                            <path fill-rule="evenodd"
                                d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
                                clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
                <p id="passwordMatchError" class="text-red-500 text-sm mt-1 hidden">Passwords do not match</p>
            </div>

            <!-- Submit Button -->
            <button type="submit" id="submitBtn" disabled
                class="w-full bg-blue-400 text-white py-3 rounded-lg hover:bg-blue-500 transition-colors cursor-not-allowed">
                Reset Password
            </button>

            <!-- Back to Login Link -->
            <p class="text-center text-gray-600">
                Remember your password? <a href="#" id="loginLink" class="text-blue-600 hover:underline">Login here</a>
            </p>
        </form>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            console.log("Password reset script initialized");

            // 1. Get token from URL (works with both ?token=ABC and /reset-password/ABC)
            const token = new URLSearchParams(window.location.search).get('token') ||
                window.location.pathname.split('/').pop();
            console.log("Extracted token:", token);

            if (!token || token === 'reset-password') {
                alert("Invalid password reset link - missing token");
                window.location.href = '/forgot-password';
                return;
            }

            // 2. Setup form validation
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmPassword');

            newPasswordInput.addEventListener('input', function () {
                checkPasswordStrength();
                checkPasswordMatch();
            });

            confirmPasswordInput.addEventListener('input', checkPasswordMatch);

            // 3. Form submission handler
            document.getElementById('passwordForm').addEventListener('submit', async function (e) {
                e.preventDefault();
                console.log("Form submission started");

                const newPassword = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                const submitBtn = document.getElementById('submitBtn');

                // Client-side validation
                if (!validatePasswords(newPassword, confirmPassword)) {
                    return;
                }

                // Disable button during submission
                submitBtn.disabled = true;
                submitBtn.innerHTML = `
            <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Processing...
        `;

                try {
                    // 4. API call to your endpoint
                    const response = await fetch(`/api/forget/reset-password/${token}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            password: newPassword,
                            confirmPassword: confirmPassword
                        })
                    });

                    const data = await response.json();
                    console.log("API response:", data);

                    if (!response.ok) {
                        throw new Error(data.message || 'Password reset failed');
                    }

                    // 5. Success handling
                    showSuccessMessage('Password reset successfully! Redirecting to login...');
                    setTimeout(() => {
                        window.location.href = data.redirectTo || '/login';
                    }, 2000);

                } catch (error) {
                    console.error("Error:", error);
                    showErrorMessage(error.message || 'An error occurred. Please try again.');
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Reset Password';
                }
            });
        });

        // ===== UTILITY FUNCTIONS ===== //

        function validatePasswords(password, confirmPassword) {
            if (password !== confirmPassword) {
                showErrorMessage("Passwords don't match!");
                return false;
            }

            const requirements = {
                length: password.length >= 8,
                upperCase: /[A-Z]/.test(password),
                number: /\d/.test(password),
                specialChar: /[!@#$%^&*(),.?":{}|<>]/.test(password)
            };

            if (!Object.values(requirements).every(Boolean)) {
                showErrorMessage("Password doesn't meet all requirements");
                return false;
            }

            return true;
        }

        function checkPasswordStrength() {
            const password = document.getElementById('newPassword').value;
            const strengthMeter = document.getElementById('strengthMeter');

            const requirements = {
                length: password.length >= 8,
                upperCase: /[A-Z]/.test(password),
                number: /\d/.test(password),
                specialChar: /[!@#$%^&*(),.?":{}|<>]/.test(password)
            };

            // Update requirement indicators
            Object.entries(requirements).forEach(([key, met]) => {
                const element = document.getElementById(`${key}Req`);
                if (element) element.classList.toggle('valid', met);
            });

            // Calculate strength (0-100)
            const strength = Object.values(requirements).filter(Boolean).length * 25;
            strengthMeter.style.width = `${strength}%`;
            strengthMeter.style.backgroundColor = getStrengthColor(strength);
        }

        function checkPasswordMatch() {
            const password = document.getElementById('newPassword').value;
            const confirm = document.getElementById('confirmPassword').value;
            const errorElement = document.getElementById('passwordMatchError');

            if (confirm.length > 0) {
                errorElement.classList.toggle('hidden', password === confirm);
            }
            updateSubmitButton();
        }

        function updateSubmitButton() {
            const submitBtn = document.getElementById('submitBtn');
            const password = document.getElementById('newPassword').value;
            const confirm = document.getElementById('confirmPassword').value;

            const allValid = (
                password.length >= 8 &&
                /[A-Z]/.test(password) &&
                /\d/.test(password) &&
                /[!@#$%^&*(),.?":{}|<>]/.test(password) &&
                password === confirm
            );

            submitBtn.disabled = !allValid;
            submitBtn.className = allValid ?
                'w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer' :
                'w-full bg-blue-400 text-white py-3 rounded-lg transition-colors cursor-not-allowed';
        }

        function getStrengthColor(strength) {
            if (strength < 50) return '#ef4444'; // red
            if (strength < 75) return '#f59e0b'; // orange
            return '#10b981'; // green
        }

        function togglePassword(inputId, eyeId) {
            const input = document.getElementById(inputId);
            const eye = document.getElementById(eyeId);

            if (input.type === 'password') {
                input.type = 'text';
                eye.innerHTML = `
            <path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd"/>
            <path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"/>
        `;
            } else {
                input.type = 'password';
                eye.innerHTML = `
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z"/>
            <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clip-rule="evenodd"/>
        `;
            }
        }

        function showErrorMessage(message) {
            // You could replace this with a prettier notification system
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg';
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);
            setTimeout(() => errorDiv.remove(), 5000);
        }

        function showSuccessMessage(message) {
            const successDiv = document.createElement('div');
            successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg';
            successDiv.textContent = message;
            document.body.appendChild(successDiv);
            setTimeout(() => successDiv.remove(), 5000);
        }
        document.getElementById("loginLink").addEventListener("click", function (e) {
            e.preventDefault(); // Prevent default navigation
            window.location.href = '/login'; // Redirect
        });
    </script>

</body>

</html>