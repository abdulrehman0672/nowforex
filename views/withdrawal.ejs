<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Withdraw Funds - FOURx</title>
    <link rel="stylesheet" href="/witdraw.css">
</head>

<body class="bg-gray-100">
    <!-- Your header/navigation -->

    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="max-w-2xl mx-auto">
            <div class="bg-white rounded-2xl shadow-lg p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-6">Withdraw Funds</h2>

                <div class="mb-6 p-4 bg-blue-50 rounded-lg">
                    <p class="text-blue-800 font-semibold">Current Balance: <span id="current-balance">
                            <%=user.balance%>
                        </span> PKR</p>
                </div>

                <form id="withdrawal-form" class="space-y-6">
                    <div>
                        <label for="withdrawal-method" class="block text-sm font-medium text-gray-700 mb-2">Withdrawal
                            Method <span class="text-red-500">*</span></label>
                        <select id="withdrawal-method"
                            class="w-full bg-white rounded-lg border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            required>
                            <option value="">Select method</option>
                            <option value="easypaisa">EasyPaisa</option>
                            <option value="jazzcash">JazzCash</option>
                            <option value="bank">Bank Transfer</option>
                        </select>
                    </div>

                    <div>
                        <label for="account-details" class="block text-sm font-medium text-gray-700 mb-2">Account
                            Details <span class="text-red-500">*</span></label>
                        <input type="text" id="account-details"
                            class="w-full bg-white rounded-lg border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="e.g., 03101234567" required>
                    </div>

                    <div>
                        <label for="withdrawal-amount" class="block text-sm font-medium text-gray-700 mb-2">Amount (PKR)
                            <span class="text-red-500">*</span></label>
                        <input type="number" id="withdrawal-amount"
                            class="w-full bg-white rounded-lg border border-gray-300 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            placeholder="Enter withdrawal amount" min="500" step="1" required>
                    </div>

                    <button type="submit"
                        class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors">
                        Request Withdrawal
                    </button>
                </form>

                <!-- Message container (initially hidden) -->
                <div id="message-container" class="mt-4 hidden">
                    <div id="message-content" class="p-4 rounded-lg"></div>
                </div>
            </div>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Form submission
            document.getElementById('withdrawal-form').addEventListener('submit', async (e) => {
                e.preventDefault();

                const form = e.target;
                const formData = {
                    amount: document.getElementById('withdrawal-amount').value,
                    method: document.getElementById('withdrawal-method').value,
                    accountDetails: document.getElementById('account-details').value
                };

                // Validate minimum amount
                if (parseFloat(formData.amount) < 500) {
                    showMessage('Minimum withdrawal amount is 500 PKR', 'error');
                    return;
                }

                try {
                    const response = await fetch('/api/withdrawals/withdraw', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('token')}`
                        },
                        body: JSON.stringify(formData)
                    });

                    const data = await response.json();

                    if (response.ok) {
                        showMessage('Withdrawal request submitted for admin approval!', 'success');
                        form.reset();

                        // Update balance display if available in response
                        if (data.updatedBalance) {
                            document.getElementById('current-balance').textContent = data.updatedBalance;
                        }
                    } else {
                        showMessage(data.message || 'Withdrawal request failed', 'error');
                    }
                } catch (error) {
                    console.error('Withdrawal error:', error);
                    showMessage('An error occurred while submitting your withdrawal request', 'error');
                }
            });

            // Function to show messages
            function showMessage(message, type) {
                const messageContainer = document.getElementById('message-container');
                const messageContent = document.getElementById('message-content');

                // Set message and style based on type
                messageContent.textContent = message;
                messageContent.className = 'p-4 rounded-lg'; // Reset classes

                if (type === 'success') {
                    messageContent.classList.add('bg-green-100', 'text-green-800');
                } else if (type === 'error') {
                    messageContent.classList.add('bg-red-100', 'text-red-800');
                } else {
                    messageContent.classList.add('bg-blue-100', 'text-blue-800');
                }

                // Show the container
                messageContainer.classList.remove('hidden');

                // Hide after 5 seconds
                setTimeout(() => {
                    messageContainer.classList.add('hidden');
                }, 5000);
            }


        });
    </script>

</body>

</html>