<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link rel="stylesheet" href="/admin.css">
    <style>
        #image-modal {
            transition: opacity 0.3s ease;
        }

        #modal-image {
            max-height: 80vh;
            max-width: 90vw;
        }

        [id$="-section"] {
            display: none;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, .3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }
    </style>
</head>

<body class="bg-gray-100">
    <div class="flex h-screen">
        <!-- Sidebar -->
        <div class="bg-blue-800 text-white w-64 p-4">
            <h1 class="text-2xl font-bold mb-8">Admin Panel</h1>
            <ul class="space-y-2">
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" data-section="dashboard">
                        <i class="fas fa-tachometer-alt mr-2"></i> Dashboard
                    </a>
                </li>
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" data-section="deposits">
                        <i class="fas fa-money-bill-wave mr-2"></i> Deposit Requests
                    </a>
                </li>
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" data-section="withdrawals">
                        <i class="fas fa-wallet mr-2"></i> Withdrawal Requests
                    </a>
                </li>
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" data-section="users">
                        <i class="fas fa-users mr-2"></i> Users
                    </a>
                </li>
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" data-section="tickets">
                        <i class="fas fa-ticket-alt mr-2"></i> Investment Tickets
                    </a>
                </li>
                <li>
                    <a href="#" class="flex items-center p-2 rounded hover:bg-blue-700" id="logout-btn">
                        <i class="fas fa-sign-out-alt mr-2"></i> Logout
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="flex-1 p-8">
            <!-- Login Section -->
            <div id="login-section" class="max-w-md mx-auto bg-white p-8 rounded-lg shadow-md">
                <h2 class="text-2xl font-bold mb-6 text-center">Admin Login</h2>
                <form id="login-form">
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="username">Username</label>
                        <input type="text" id="username"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            required>
                    </div>
                    <div class="mb-6">
                        <label class="block text-gray-700 mb-2" for="password">Password</label>
                        <input type="password" id="password"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            required>
                    </div>
                    <button type="submit" id="login-btn"
                        class="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition">
                        <span id="login-text">Login</span>
                        <span id="login-spinner" class="loading-spinner hidden"></span>
                    </button>
                    <div id="login-error" class="text-red-500 mt-2 text-sm hidden"></div>
                </form>
            </div>

            <!-- Dashboard Section -->
            <div id="dashboard-section" class="hidden">
                <h2 class="text-2xl font-bold mb-6">Dashboard</h2>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h3 class="text-lg font-semibold mb-2">Total Users</h3>
                        <p id="total-users" class="text-3xl font-bold text-blue-600">0</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h3 class="text-lg font-semibold mb-2">Pending Deposits</h3>
                        <p id="pending-deposits" class="text-3xl font-bold text-yellow-600">0</p>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md">
                        <h3 class="text-lg font-semibold mb-2">Pending Withdrawals</h3>
                        <p id="pending-withdrawals" class="text-3xl font-bold text-yellow-600">0</p>
                    </div>
                </div>
            </div>

            <!-- Deposit Requests Section -->
            <div id="deposits-section" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Pending Deposit Requests</h2>
                    <button id="refresh-deposits" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">User
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Method
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                                        Transaction ID</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Proof
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="deposits-table-body" class="divide-y divide-gray-200">
                                <!-- Deposits will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Withdrawal Requests Section -->
            <div id="withdrawals-section" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Pending Withdrawal Requests</h2>
                    <button id="refresh-withdrawals"
                        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">User
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Current
                                        Balance</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Method
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Account
                                        Details</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody id="withdrawals-table-body" class="divide-y divide-gray-200">
                                <!-- Withdrawals will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Users Section -->
            <div id="users-section" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">All Users</h2>
                    <button id="refresh-users" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">
                        <i class="fas fa-sync-alt mr-2"></i>Refresh
                    </button>
                </div>
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Username
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Email
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Balance
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total
                                        Deposits</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Total
                                        Withdrawals</th>
                                </tr>
                            </thead>
                            <tbody id="users-table-body" class="divide-y divide-gray-200">
                                <!-- Users will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Tickets Section -->
            <div id="tickets-section" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-2xl font-bold">Investment Tickets</h2>
                    <div>
                        <button id="refresh-tickets" class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 mr-2">
                            <i class="fas fa-sync-alt mr-2"></i>Refresh
                        </button>
                        <button id="add-ticket" class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700">
                            <i class="fas fa-plus mr-2"></i>Add Ticket
                        </button>
                    </div>
                </div>

                <!-- Tickets Table -->
                <div class="bg-white rounded-lg shadow-md overflow-hidden">
                    <div class="overflow-x-auto">
                        <table class="min-w-full">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Profit</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Validity</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="tickets-table-body" class="divide-y divide-gray-200">
                                <!-- Tickets will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Image Modal -->
    <div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-4 rounded-lg max-w-4xl max-h-screen">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold">Proof Image</h3>
                <button id="close-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="flex justify-center items-center min-h-[300px]">
                <img id="modal-image" src="" alt="Proof Image" class="max-w-full max-h-[80vh] hidden">
                <div id="image-loading" class="text-center py-8">
                    <div class="loading-spinner mx-auto mb-4"></div>
                    <p>Loading image...</p>
                </div>
                <div id="image-error" class="text-center py-8 hidden">
                    <i class="fas fa-exclamation-circle text-red-500 text-4xl mb-4"></i>
                    <p class="text-red-500">Could not load image</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Ticket Modal -->
    <div id="ticket-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white p-6 rounded-lg max-w-md w-full">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-bold" id="ticket-modal-title">Add New Ticket</h3>
                <button id="close-ticket-modal" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="ticket-form">
                <input type="hidden" id="ticket-id">
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2" for="ticket-name">Ticket Name</label>
                    <input type="text" id="ticket-name"
                        class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2" for="ticket-description">Description</label>
                    <textarea id="ticket-description"
                        class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        rows="3"></textarea>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">
                        <input type="checkbox" id="custom-amount" class="mr-2"> Allow custom amount
                    </label>
                </div>
                <div id="fixed-amount-fields">
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="ticket-amount">Fixed Amount ($)</label>
                        <input type="number" id="ticket-amount"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            min="0" step="0.01">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="ticket-profit">Fixed Profit ($)</label>
                        <input type="number" id="ticket-profit"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            min="0" step="0.01">
                    </div>
                </div>
                <div id="custom-amount-fields" class="hidden">
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="min-amount">Minimum Amount ($)</label>
                        <input type="number" id="min-amount"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            min="0" step="0.01">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="max-amount">Maximum Amount ($)</label>
                        <input type="number" id="max-amount"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            min="0" step="0.01">
                    </div>
                    <div class="mb-4">
                        <label class="block text-gray-700 mb-2" for="profit-percentage">Profit Percentage (%)</label>
                        <input type="number" id="profit-percentage"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            min="0" step="0.01">
                    </div>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2" for="validity-hours">Validity (Hours)</label>
                    <input type="number" id="validity-hours"
                        class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        min="1" value="24">
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 mb-2">
                        <input type="checkbox" id="is-active" class="mr-2" checked> Active
                    </label>
                </div>
                <div class="flex justify-end space-x-3">
                    <button type="button" id="cancel-ticket"
                        class="bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600">Cancel</button>
                    <button type="submit" id="save-ticket"
                        class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">Save</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        let token = localStorage.getItem('adminToken') || null;
        let currentUser = null;

        // Check authentication status on page load
        document.addEventListener('DOMContentLoaded', function () {
            setupEventListeners();

            if (token) {
                verifyTokenAndLoad();
            } else {
                showSection('login');
            }
        });

        function setupEventListeners() {
            // Navigation links
            document.querySelectorAll('[data-section]').forEach(link => {
                link.addEventListener('click', function (e) {
                    e.preventDefault();
                    if (token) {
                        showSection(this.getAttribute('data-section'));
                    } else {
                        showSection('login');
                    }
                });
            });

            // Logout button
            document.getElementById('logout-btn').addEventListener('click', function (e) {
                e.preventDefault();
                logout();
            });

            // Login form
            document.getElementById('login-form').addEventListener('submit', handleLogin);

            // Refresh buttons
            document.getElementById('refresh-deposits').addEventListener('click', loadDeposits);
            document.getElementById('refresh-withdrawals').addEventListener('click', loadWithdrawals);
            document.getElementById('refresh-users').addEventListener('click', loadUsers);
            document.getElementById('refresh-tickets').addEventListener('click', loadTickets);

            // Close modals
            document.getElementById('close-modal').addEventListener('click', hideImageModal);
            document.getElementById('close-ticket-modal').addEventListener('click', hideTicketModal);
            document.getElementById('cancel-ticket').addEventListener('click', hideTicketModal);

            // Ticket form
            document.getElementById('ticket-form').addEventListener('submit', handleTicketFormSubmit);
            document.getElementById('add-ticket').addEventListener('click', () => showTicketModal());
            document.getElementById('custom-amount').addEventListener('change', function() {
                const isCustom = this.checked;
                document.getElementById('fixed-amount-fields').classList.toggle('hidden', isCustom);
                document.getElementById('custom-amount-fields').classList.toggle('hidden', !isCustom);
            });

            // Event delegation for dynamic content
            document.addEventListener('click', function (e) {
                // Handle deposit actions
                if (e.target.matches('[data-deposit-action]')) {
                    const depositId = e.target.getAttribute('data-deposit-id');
                    const action = e.target.getAttribute('data-deposit-action');
                    handleDepositAction(depositId, action);
                }

                // Handle withdrawal actions
                if (e.target.matches('[data-withdrawal-action]')) {
                    const withdrawalId = e.target.getAttribute('data-withdrawal-id');
                    const action = e.target.getAttribute('data-withdrawal-action');
                    handleWithdrawalAction(withdrawalId, action);
                }

                // Handle image proof clicks
                if (e.target.matches('[data-proof-image]')) {
                    e.preventDefault();
                    const imageUrl = e.target.getAttribute('href');
                    showImageModal(imageUrl);
                }

                // Handle ticket actions
                if (e.target.matches('[data-ticket-action]')) {
                    const ticketId = e.target.getAttribute('data-ticket-id');
                    const action = e.target.getAttribute('data-ticket-action');
                    handleTicketAction(ticketId, action);
                }
            });
        }

        async function verifyTokenAndLoad() {
            try {
                const response = await fetch('/api/admin/verify', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    currentUser = data.admin;
                    document.getElementById('login-section').style.display = 'none';
                    showSection('dashboard');
                    loadDashboard();
                } else {
                    logout();
                }
            } catch (error) {
                console.error('Token verification error:', error);
                logout();
            }
        }

        // Image modal functions
        function showImageModal(imageUrl) {
            const modal = document.getElementById('image-modal');
            const img = document.getElementById('modal-image');
            const loading = document.getElementById('image-loading');
            const error = document.getElementById('image-error');

            // Reset modal state
            modal.classList.remove('hidden');
            img.classList.add('hidden');
            loading.classList.remove('hidden');
            error.classList.add('hidden');

            // Create authenticated URL if needed
            const token = localStorage.getItem('adminToken');
            const authenticatedUrl = token ? `${imageUrl}?token=${token}` : imageUrl;

            // Set up image loading
            img.onload = function () {
                loading.classList.add('hidden');
                img.classList.remove('hidden');
            };

            img.onerror = function () {
                loading.classList.add('hidden');
                error.classList.remove('hidden');
            };

            img.src = authenticatedUrl;
        }

        function hideImageModal() {
            document.getElementById('image-modal').classList.add('hidden');
            document.getElementById('modal-image').src = '';
            document.getElementById('modal-image').onload = null;
            document.getElementById('modal-image').onerror = null;
        }

        async function handleLogin(e) {
            e.preventDefault();
            const loginBtn = document.getElementById('login-btn');
            const loginText = document.getElementById('login-text');
            const loginSpinner = document.getElementById('login-spinner');
            const loginError = document.getElementById('login-error');

            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;

            // Show loading state
            loginText.classList.add('hidden');
            loginSpinner.classList.remove('hidden');
            loginError.classList.add('hidden');

            try {
                const response = await fetch('/api/admin/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (response.ok) {
                    token = data.token;
                    localStorage.setItem('adminToken', token);
                    currentUser = data.admin;
                    document.getElementById('login-section').style.display = 'none';
                    showSection('dashboard');
                    loadDashboard();
                } else {
                    loginError.textContent = data.message || 'Login failed';
                    loginError.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Login error:', error);
                loginError.textContent = 'An error occurred during login';
                loginError.classList.remove('hidden');
            } finally {
                loginText.classList.remove('hidden');
                loginSpinner.classList.add('hidden');
            }
        }

        function showSection(sectionId) {
            if (!token && sectionId !== 'login') {
                showSection('login');
                return;
            }

            // Hide all sections
            document.querySelectorAll('[id$="-section"]').forEach(section => {
                section.style.display = 'none';
            });

            // Show requested section
            const section = document.getElementById(`${sectionId}-section`);
            if (section) {
                section.style.display = 'block';
            }

            // Load data when section is shown
            switch (sectionId) {
                case 'dashboard':
                    loadDashboard();
                    break;
                case 'deposits':
                    loadDeposits();
                    break;
                case 'withdrawals':
                    loadWithdrawals();
                    break;
                case 'users':
                    loadUsers();
                    break;
                case 'tickets':
                    loadTickets();
                    break;
            }
        }

        async function loadDashboard() {
            try {
                const [usersRes, depositsRes, withdrawalsRes] = await Promise.all([
                    fetch('/api/admin/users', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }),
                    fetch('/api/admin/deposits/pending', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    }),
                    fetch('/api/admin/withdrawals/pending', {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    })
                ]);

                // Check for unauthorized responses
                if (usersRes.status === 401 || depositsRes.status === 401 || withdrawalsRes.status === 401) {
                    logout();
                    return;
                }

                const users = await usersRes.json();
                const deposits = await depositsRes.json();
                const withdrawals = await withdrawalsRes.json();

                document.getElementById('total-users').textContent = users.length;
                document.getElementById('pending-deposits').textContent = deposits.length;
                document.getElementById('pending-withdrawals').textContent = withdrawals.length;
            } catch (error) {
                console.error('Error loading dashboard:', error);
                if (error.status === 401) {
                    logout();
                }
            }
        }

        async function loadDeposits() {
            const tableBody = document.getElementById('deposits-table-body');
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">Loading...</td></tr>';

            try {
                const response = await fetch('/api/admin/deposits/pending', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.status === 401) {
                    logout();
                    return;
                }

                const deposits = await response.json();
                tableBody.innerHTML = '';

                if (deposits.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">No pending deposits</td></tr>';
                    return;
                }

                deposits.forEach(deposit => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">${deposit.username}</div>
                            <div class="text-sm text-gray-500">${deposit.name}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${deposit.amount.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${deposit.method}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${deposit.transactionId}</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            ${deposit.proofImage ?
                            `<a href="/uploads/${deposit.proofImage}" 
                                data-proof-image 
                                class="text-blue-600 hover:text-blue-800">
                                View Proof
                                </a>` :
                            'No proof'}
                            </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(deposit.createdAt).toLocaleString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button data-deposit-id="${deposit._id}" data-deposit-action="approve" class="text-green-600 hover:text-green-900 mr-3">Approve</button>
                            <button data-deposit-id="${deposit._id}" data-deposit-action="reject" class="text-red-600 hover:text-red-900">Reject</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading deposits:', error);
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-red-500">Error loading deposits</td></tr>';
                if (error.status === 401) {
                    logout();
                }
            }
        }

        async function handleDepositAction(depositId, action) {
            if (!confirm(`Are you sure you want to ${action} this deposit?`)) return;

            try {
                const response = await fetch(`/api/admin/deposits/${depositId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ action })
                });

                const data = await response.json();

                if (response.ok) {
                    alert(data.message);
                    loadDeposits();
                    loadDashboard();
                } else {
                    alert(data.message || 'Action failed');
                }
            } catch (error) {
                console.error('Error handling deposit action:', error);
                alert('An error occurred');
                if (error.status === 401) {
                    logout();
                }
            }
        }

        async function loadWithdrawals() {
            const tableBody = document.getElementById('withdrawals-table-body');
            tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">Loading...</td></tr>';

            try {
                const response = await fetch('/api/admin/withdrawals/pending', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.status === 401) {
                    logout();
                    return;
                }

                const withdrawals = await response.json();
                tableBody.innerHTML = '';

                if (withdrawals.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4">No pending withdrawals</td></tr>';
                    return;
                }

                withdrawals.forEach(withdrawal => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">${withdrawal.username}</div>
                            <div class="text-sm text-gray-500">${withdrawal.name}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${withdrawal.currentBalance.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${withdrawal.amount.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${withdrawal.method}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${withdrawal.accountDetails}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${new Date(withdrawal.createdAt).toLocaleString()}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button data-withdrawal-id="${withdrawal._id}" data-withdrawal-action="approve" class="text-green-600 hover:text-green-900 mr-3">Approve</button>
                            <button data-withdrawal-id="${withdrawal._id}" data-withdrawal-action="reject" class="text-red-600 hover:text-red-900">Reject</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading withdrawals:', error);
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center py-4 text-red-500">Error loading withdrawals</td></tr>';
                if (error.status === 401) {
                    logout();
                }
            }
        }

        async function handleWithdrawalAction(withdrawalId, action) {
            if (!confirm(`Are you sure you want to ${action} this withdrawal?`)) return;

            try {
                const response = await fetch(`/api/admin/withdrawals/${withdrawalId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ action })
                });

                const data = await response.json();

                if (response.ok) {
                    alert(data.message);
                    loadWithdrawals();
                    loadDashboard();
                } else {
                    alert(data.message || 'Action failed');
                }
            } catch (error) {
                console.error('Error handling withdrawal action:', error);
                alert('An error occurred');
                if (error.status === 401) {
                    logout();
                }
            }
        }

        async function loadUsers() {
            const tableBody = document.getElementById('users-table-body');
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">Loading...</td></tr>';

            try {
                const response = await fetch('/api/admin/users', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (response.status === 401) {
                    logout();
                    return;
                }

                const users = await response.json();
                tableBody.innerHTML = '';

                users.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${user.username}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${user.email}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${user.balance.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${user.totalDeposits.toFixed(2)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">$${user.totalWithdrawals.toFixed(2)}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading users:', error);
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4 text-red-500">Error loading users</td></tr>';
                if (error.status === 401) {
                    logout();
                }
            }
        }

        function logout() {
            token = null;
            currentUser = null;
            localStorage.removeItem('adminToken');
            document.getElementById('login-section').style.display = 'block';
            showSection('login');
            document.getElementById('username').value = '';
            document.getElementById('password').value = '';
        }

        // Ticket management functions
        async function loadTickets() {
            const tableBody = document.getElementById('tickets-table-body');
            tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">Loading...</td></tr>';

            try {
                console.log('Loading tickets...');
                const response = await fetch('/api/admin/tickets', {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                console.log('Response status:', response.status);

                if (response.status === 401) {
                    logout();
                    return;
                }

                const tickets = await response.json();
                console.log('Tickets data:', tickets);

                tableBody.innerHTML = '';

                if (tickets.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4">No tickets found</td></tr>';
                    return;
                }

                tickets.forEach(ticket => {
                    const row = document.createElement('tr');

                    let amountInfo;
                    let profitInfo;

                    if (ticket.isCustomAmount) {
                        amountInfo = `Custom ($${ticket.minCustomAmount} - $${ticket.maxCustomAmount})`;
                        profitInfo = `${ticket.profitPercentage}%`;
                    } else {
                        amountInfo = `$${ticket.amount}`;
                        profitInfo = `$${ticket.profit}`;
                    }

                    row.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">${ticket.name}</div>
                            <div class="text-sm text-gray-500">${ticket.description || 'No description'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${amountInfo}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${profitInfo}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${ticket.validityHours} hours</td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${ticket.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}">
                                ${ticket.isActive ? 'Active' : 'Inactive'}
                            </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button data-ticket-id="${ticket._id}" data-ticket-action="edit" class="text-blue-600 hover:text-blue-900 mr-3">Edit</button>
                            <button data-ticket-id="${ticket._id}" data-ticket-action="delete" class="text-red-600 hover:text-red-900">Delete</button>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading tickets:', error);
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center py-4 text-red-500">Error loading tickets</td></tr>';
            }
        }

        function showTicketModal(ticket = null) {
            const modal = document.getElementById('ticket-modal');
            const title = document.getElementById('ticket-modal-title');
            const form = document.getElementById('ticket-form');
            const customAmountCheckbox = document.getElementById('custom-amount');
            const fixedAmountFields = document.getElementById('fixed-amount-fields');
            const customAmountFields = document.getElementById('custom-amount-fields');

            if (ticket) {
                // Edit mode
                title.textContent = 'Edit Ticket';
                document.getElementById('ticket-id').value = ticket._id;
                document.getElementById('ticket-name').value = ticket.name;
                document.getElementById('ticket-description').value = ticket.description || '';
                document.getElementById('validity-hours').value = ticket.validityHours;
                document.getElementById('is-active').checked = ticket.isActive !== false;

                if (ticket.isCustomAmount) {
                    customAmountCheckbox.checked = true;
                    fixedAmountFields.classList.add('hidden');
                    customAmountFields.classList.remove('hidden');
                    document.getElementById('min-amount').value = ticket.minCustomAmount || 0;
                    document.getElementById('max-amount').value = ticket.maxCustomAmount;
                    document.getElementById('profit-percentage').value = ticket.profitPercentage;
                } else {
                    customAmountCheckbox.checked = false;
                    fixedAmountFields.classList.remove('hidden');
                    customAmountFields.classList.add('hidden');
                    document.getElementById('ticket-amount').value = ticket.amount;
                    document.getElementById('ticket-profit').value = ticket.profit;
                }
            } else {
                // Add mode
                title.textContent = 'Add New Ticket';
                form.reset();
                customAmountCheckbox.checked = false;
                fixedAmountFields.classList.remove('hidden');
                customAmountFields.classList.add('hidden');
                document.getElementById('validity-hours').value = 24;
                document.getElementById('is-active').checked = true;
            }

            modal.classList.remove('hidden');
        }

        async function handleTicketFormSubmit(e) {
            e.preventDefault();

            const saveBtn = document.getElementById('save-ticket');
            const saveText = saveBtn.textContent;

            try {
                saveBtn.disabled = true;
                saveBtn.innerHTML = '<span class="loading-spinner"></span> Saving...';

                const formData = {
                    name: document.getElementById('ticket-name').value,
                    description: document.getElementById('ticket-description').value,
                    validityHours: document.getElementById('validity-hours').value,
                    isActive: document.getElementById('is-active').checked,
                    isCustomAmount: document.getElementById('custom-amount').checked
                };

                if (formData.isCustomAmount) {
                    formData.minCustomAmount = document.getElementById('min-amount').value;
                    formData.maxCustomAmount = document.getElementById('max-amount').value;
                    formData.profitPercentage = document.getElementById('profit-percentage').value;
                } else {
                    formData.amount = document.getElementById('ticket-amount').value;
                    formData.profit = document.getElementById('ticket-profit').value;
                }

                const ticketId = document.getElementById('ticket-id').value;
                const url = ticketId ? `/api/admin/tickets/${ticketId}` : '/api/admin/tickets';
                const method = ticketId ? 'PUT' : 'POST';

                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify(formData)
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to save ticket');
                }

                hideTicketModal();
                loadTickets();
            } catch (error) {
                console.error('Error saving ticket:', error);
                alert(error.message || 'An error occurred while saving the ticket');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = saveText;
            }
        }

        function hideTicketModal() {
            document.getElementById('ticket-modal').classList.add('hidden');
        }

        async function handleTicketAction(ticketId, action) {
            try {
                if (action === 'edit') {
                    const response = await fetch(`/api/admin/tickets/${ticketId}`, {
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Failed to fetch ticket details');
                    }

                    const ticket = await response.json();
                    showTicketModal(ticket);
                } else if (action === 'delete') {
                    if (!confirm('Are you sure you want to delete this ticket?')) return;

                    const response = await fetch(`/api/admin/tickets/${ticketId}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Failed to delete ticket');
                    }

                    loadTickets();
                }
            } catch (error) {
                console.error(`Error ${action} ticket:`, error);
                alert(error.message || `An error occurred while ${action}ing the ticket`);
            }
        }
    </script>
</body>
</html>